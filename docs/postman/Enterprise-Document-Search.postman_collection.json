{
	"info": {
		"_postman_id": "enterprise-doc-search-v1",
		"name": "Enterprise Document Search API",
		"description": "Comprehensive API collection for Enterprise Document Search Service with JWT authentication, document management, and file processing capabilities.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "enterprise-docs"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Registration successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains user data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('username');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{test_username}}\",\n    \"email\": \"{{test_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"tenantId\": \"{{tenant_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains tokens\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.expect(jsonData).to.have.property('refreshToken');",
									"    ",
									"    // Store tokens for subsequent requests",
									"    pm.environment.set('access_token', jsonData.accessToken);",
									"    pm.environment.set('refresh_token', jsonData.refreshToken);",
									"});",
									"",
									"pm.test(\"Response contains user info\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('username');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"usernameOrEmail\": \"{{test_username}}\",\n    \"password\": \"{{test_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token refresh successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains new access token\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    ",
									"    // Update stored access token",
									"    pm.environment.set('access_token', jsonData.accessToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Profile retrieval successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains user profile\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('tenantId');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for user registration, login, token management, and profile access."
		},
		{
			"name": "Documents",
			"item": [
				{
					"name": "Get All Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get documents successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains documents list\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData).to.have.property('totalElements');",
									"    pm.expect(jsonData).to.have.property('totalPages');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/documents?page=0&size=10&sortBy=lastModifiedDate&sortDir=desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"documents"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sortBy",
									"value": "lastModifiedDate"
								},
								{
									"key": "sortDir",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get document successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains document data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('content');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/documents/{{document_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"{{document_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Document creation successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains created document\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    ",
									"    // Store document ID for other tests",
									"    pm.environment.set('document_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Document\",\n    \"content\": \"This is a test document content for API testing.\",\n    \"author\": \"Test User\",\n    \"tags\": \"test,api,document\",\n    \"fileName\": \"test-document.txt\",\n    \"fileType\": \"text/plain\",\n    \"fileSize\": 1024\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/documents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Document update successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains updated document\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.title).to.equal('Updated Test Document');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Test Document\",\n    \"content\": \"This is an updated test document content.\",\n    \"author\": \"Test User Updated\",\n    \"tags\": \"test,api,document,updated\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/documents/{{document_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"{{document_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Document search successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains search results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/documents/search?query=test",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "test"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Document count retrieval successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains count\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('documentCount');",
									"    pm.expect(jsonData).to.have.property('tenantId');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/documents/count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Document deletion successful\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/documents/{{document_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"{{document_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Document management endpoints for CRUD operations, search, and analytics."
		},
		{
			"name": "File Upload",
			"item": [
				{
					"name": "Upload Single Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"File upload successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains document info\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('document');",
									"    pm.expect(jsonData).to.have.property('fileName');",
									"    pm.expect(jsonData).to.have.property('fileSize');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "title",
									"value": "Uploaded Test Document",
									"type": "text"
								},
								{
									"key": "author",
									"value": "Test User",
									"type": "text"
								},
								{
									"key": "tags",
									"value": "upload,test,document",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/v1/upload/document",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"upload",
								"document"
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch Upload Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Batch upload successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains batch results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('totalFiles');",
									"    pm.expect(jsonData).to.have.property('successfulUploads');",
									"    pm.expect(jsonData).to.have.property('failedUploads');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": []
								},
								{
									"key": "files",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/v1/upload/documents/batch",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"upload",
								"documents",
								"batch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Supported File Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get supported types successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains supported types\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('supportedTypes');",
									"    pm.expect(jsonData).to.have.property('maxFileSize');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/upload/supported-types",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"upload",
								"supported-types"
							]
						}
					},
					"response": []
				}
			],
			"description": "File upload endpoints for single and batch document processing with content extraction."
		},
		{
			"name": "Health & Monitoring",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Health check successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Service is healthy\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.equal('UP');",
									"    pm.expect(jsonData).to.have.property('service');",
									"    pm.expect(jsonData).to.have.property('version');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Application Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Info retrieval successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains app info\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('application');",
									"    pm.expect(jsonData).to.have.property('version');",
									"    pm.expect(jsonData).to.have.property('description');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/info",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Welcome Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Welcome endpoint accessible\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains welcome message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Actuator Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Actuator health check successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Health status is UP\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.equal('UP');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/actuator/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"actuator",
								"health"
							]
						}
					},
					"response": []
				}
			],
			"description": "Health monitoring and application information endpoints."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script to handle token refresh if needed",
					"const token = pm.environment.get('access_token');",
					"if (token && token !== '') {",
					"    console.log('Access token found:', token.substring(0, 20) + '...');",
					"} else {",
					"    console.log('No access token found. Please login first.');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script for common validations",
					"pm.test('Response time is less than 2000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"// Handle token expiration",
					"if (pm.response.code === 401) {",
					"    console.log('Token expired or invalid. Please refresh token or login again.');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "test_username",
			"value": "testuser",
			"type": "string"
		},
		{
			"key": "test_email",
			"value": "testuser@example.com",
			"type": "string"
		},
		{
			"key": "test_password",
			"value": "TestPassword123!",
			"type": "string"
		},
		{
			"key": "tenant_id",
			"value": "test-tenant-001",
			"type": "string"
		}
	]
}