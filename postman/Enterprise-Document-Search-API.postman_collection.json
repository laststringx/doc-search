{
	"info": {
		"_postman_id": "enterprise-document-search-api",
		"name": "Enterprise Document Search API",
		"description": "API collection for testing the Enterprise Document Search Service with multi-tenant document management, full-text search, and CRUD operations.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "enterprise-document-search"
	},
	"item": [
		{
			"name": "Health & Info",
			"item": [
				{
					"name": "Welcome Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains welcome message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.contain(\"Welcome to Enterprise Document Search Service\");",
									"    pm.expect(jsonData.status).to.eql(\"Active\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Health status is UP\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UP\");",
									"    pm.expect(jsonData.service).to.eql(\"Enterprise Document Search\");",
									"    pm.expect(jsonData.version).to.eql(\"1.0-SNAPSHOT\");",
									"    pm.expect(jsonData.environment).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Application Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Application info is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.application).to.eql(\"Enterprise Document Search\");",
									"    pm.expect(jsonData.description).to.eql(\"Distributed Document Search Service\");",
									"    pm.expect(jsonData.version).to.eql(\"1.0-SNAPSHOT\");",
									"    pm.expect(jsonData['java-version']).to.exist;",
									"    pm.expect(jsonData['spring-boot-version']).to.eql(\"3.2.0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"info"
							]
						}
					},
					"response": []
				}
			],
			"description": "Basic health check and application information endpoints"
		},
		{
			"name": "Document Management",
			"item": [
				{
					"name": "Create Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Document created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.title).to.eql(\"Sample Technical Document\");",
									"    pm.expect(jsonData.tenantId).to.eql(\"tenant1\");",
									"    pm.expect(jsonData.author).to.eql(\"John Doe\");",
									"    pm.expect(jsonData.fileType).to.eql(\"pdf\");",
									"    pm.expect(jsonData.createdDate).to.exist;",
									"    ",
									"    // Store document ID for future tests",
									"    pm.environment.set(\"documentId\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Sample Technical Document\",\n    \"content\": \"This is a comprehensive technical document about distributed systems architecture. It covers microservices, scalability patterns, and best practices for enterprise applications. The document includes detailed examples of Spring Boot applications, database design patterns, and containerization strategies using Docker and Kubernetes.\",\n    \"fileName\": \"technical-guide.pdf\",\n    \"fileType\": \"pdf\",\n    \"fileSize\": 2048576,\n    \"author\": \"John Doe\",\n    \"tags\": \"technical,architecture,microservices,spring-boot,docker\",\n    \"status\": \"published\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/documents",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Second Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Second document created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.title).to.eql(\"User Manual\");",
									"    pm.expect(jsonData.tenantId).to.eql(\"tenant1\");",
									"    ",
									"    // Store second document ID for future tests",
									"    pm.environment.set(\"documentId2\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"User Manual\",\n    \"content\": \"Complete user manual for the Enterprise Document Search application. This manual covers installation, configuration, API usage, and troubleshooting steps. It includes examples of REST API calls, authentication methods, and best practices for document management.\",\n    \"fileName\": \"user-manual.docx\",\n    \"fileType\": \"docx\",\n    \"fileSize\": 1024000,\n    \"author\": \"Jane Smith\",\n    \"tags\": \"manual,user-guide,documentation,api\",\n    \"status\": \"published\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/documents",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Document retrieved successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"documentId\")));",
									"    pm.expect(jsonData.title).to.exist;",
									"    pm.expect(jsonData.tenantId).to.eql(\"tenant1\");",
									"    pm.expect(jsonData.content).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/documents/{{documentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"{{documentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Documents list retrieved successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.documents).to.be.an('array');",
									"    pm.expect(jsonData.totalItems).to.be.at.least(2);",
									"    pm.expect(jsonData.currentPage).to.eql(0);",
									"    pm.expect(jsonData.pageSize).to.eql(10);",
									"    pm.expect(jsonData.totalPages).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/documents?page=0&size=10&sortBy=lastModifiedDate&sortDir=desc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"documents"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sortBy",
									"value": "lastModifiedDate"
								},
								{
									"key": "sortDir",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Document updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"documentId\")));",
									"    pm.expect(jsonData.title).to.eql(\"Updated Technical Document\");",
									"    pm.expect(jsonData.status).to.eql(\"revised\");",
									"    pm.expect(jsonData.version).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Technical Document\",\n    \"content\": \"This is an updated comprehensive technical document about distributed systems architecture. It now includes new sections on cloud-native patterns, observability, and security best practices. Updated with the latest Spring Boot 3.x features and modern containerization approaches.\",\n    \"fileName\": \"technical-guide-v2.pdf\",\n    \"fileType\": \"pdf\",\n    \"fileSize\": 2500000,\n    \"author\": \"John Doe\",\n    \"tags\": \"technical,architecture,microservices,spring-boot,docker,cloud-native,updated\",\n    \"status\": \"revised\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/documents/{{documentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"{{documentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Search results returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.documents).to.be.an('array');",
									"    pm.expect(jsonData.query).to.eql(\"technical\");",
									"    pm.expect(jsonData.totalItems).to.be.at.least(1);",
									"    ",
									"    // Check if search found the technical document",
									"    var foundTechnicalDoc = jsonData.documents.some(doc => ",
									"        doc.title.toLowerCase().includes('technical') || ",
									"        doc.content.toLowerCase().includes('technical')",
									"    );",
									"    pm.expect(foundTechnicalDoc).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/documents/search?query=technical&page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "technical"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Recent Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Recent documents retrieved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData.length).to.be.at.most(5); // Limited to 5 by default",
									"    pm.expect(jsonData.length).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/documents/recent?limit=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"recent"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Document count retrieved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tenantId).to.eql(\"tenant1\");",
									"    pm.expect(jsonData.documentCount).to.be.at.least(2);",
									"    pm.expect(jsonData.documentCount).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/documents/count",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"count"
							]
						}
					},
					"response": []
				}
			],
			"description": "Document CRUD operations and search functionality"
		},
		{
			"name": "Multi-Tenant Tests",
			"item": [
				{
					"name": "Create Document for Tenant2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Document created for tenant2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tenantId).to.eql(\"tenant2\");",
									"    pm.expect(jsonData.title).to.eql(\"Tenant2 Document\");",
									"    ",
									"    pm.environment.set(\"tenant2DocumentId\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Tenant-ID",
								"value": "tenant2"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Tenant2 Document\",\n    \"content\": \"This document belongs to tenant2 and should not be visible to tenant1. It contains tenant-specific information and demonstrates the multi-tenancy isolation feature of the application.\",\n    \"fileName\": \"tenant2-doc.txt\",\n    \"fileType\": \"txt\",\n    \"fileSize\": 512000,\n    \"author\": \"Alice Johnson\",\n    \"tags\": \"tenant2,isolation,test\",\n    \"status\": \"published\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/documents",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Tenant Isolation - Tenant1 Cannot See Tenant2 Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Tenant isolation working - tenant1 cannot access tenant2 document\", function () {",
									"    // This should return 404 because tenant1 cannot access tenant2's documents",
									"    pm.expect(pm.response.code).to.eql(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/documents/{{tenant2DocumentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"{{tenant2DocumentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Documents Count for Tenant2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Tenant2 has exactly 1 document\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tenantId).to.eql(\"tenant2\");",
									"    pm.expect(jsonData.documentCount).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Tenant-ID",
								"value": "tenant2"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/documents/count",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"count"
							]
						}
					},
					"response": []
				}
			],
			"description": "Tests to verify multi-tenant isolation and security"
		},
		{
			"name": "Error Handling Tests",
			"item": [
				{
					"name": "Get Non-existent Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Non-existent document returns 404\", function () {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/documents/99999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"99999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Non-existent Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Update non-existent document returns 404\", function () {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Non-existent Document\",\n    \"content\": \"This should not work\",\n    \"author\": \"Test User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/documents/99999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"99999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Non-existent Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Delete non-existent document returns 404\", function () {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/documents/99999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"99999"
							]
						}
					},
					"response": []
				}
			],
			"description": "Tests for error handling and edge cases"
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Delete Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Document deleted successfully\", function () {",
									"    pm.expect(pm.response.code).to.eql(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Tenant-ID",
								"value": "{{tenantId}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/documents/{{documentId2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"{{documentId2}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Cleanup operations to remove test data"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set default values if not already set",
					"if (!pm.environment.get(\"baseUrl\")) {",
					"    pm.environment.set(\"baseUrl\", \"http://localhost:8080\");",
					"}",
					"",
					"if (!pm.environment.get(\"tenantId\")) {",
					"    pm.environment.set(\"tenantId\", \"tenant1\");",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript", 
				"exec": [
					"// Global test script",
					"pm.test(\"Response time is less than 5000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test(\"Content-Type is application/json (if applicable)\", function () {",
					"    if (pm.response.headers.get(\"Content-Type\")) {",
					"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
					"    }",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "tenantId",
			"value": "tenant1",
			"type": "string"
		}
	]
}